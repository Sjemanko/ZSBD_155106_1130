CREATE TABLE EMPLOYEES(
    employee_id INT GENERATED AS IDENTITY NOT NULL,
    first_name VARCHAR2(50),
    last_name VARCHAR2(50),
    email VARCHAR2(50),
    phone_number VARCHAR2(20),
    hire_date DATE,
    job_id INT,
    salary FLOAT,
    commision_pct FLOAT,
    manager_id INT,
    department_id INT,
    PRIMARY KEY (employee_id)
);

CREATE TABLE DEPARTMENTS(
    department_id INT GENERATED AS IDENTITY NOT NULL,
    department_name VARCHAR2(50),
    manager_id INT,
    location_id INT,
    PRIMARY KEY (department_id)
);

CREATE TABLE JOB_HISTORY (
    employee_id INT NOT NULL,
    start_date DATE,
    end_date DATE,
    job_id INT NOT NULL,
    department_id INT NOT NULL
);

CREATE TABLE JOBS (
    job_id INT GENERATED AS IDENTITY NOT NULL,
    job_title VARCHAR2(50),
    min_salary FLOAT,
    max_salary FLOAT,
    PRIMARY KEY (job_id)
);

CREATE TABLE LOCATIONS (
    location_id INT GENERATED AS IDENTITY NOT NULL,
    street_address VARCHAR2(50),
    postal_code VARCHAR2(20),
    city VARCHAR(50),
    state_province VARCHAR(50),
    country_id INT,
    PRIMARY KEY (location_id)
);

CREATE TABLE COUNTRIES (
    country_id INT GENERATED AS IDENTITY NOT NULL,
    country_name VARCHAR(50),
    region_id INT,
    PRIMARY KEY (country_id)
);

CREATE TABLE REGIONS (
    region_id INT GENERATED AS IDENTITY NOT NULL,
    region_name VARCHAR(50),
    PRIMARY KEY (region_id)
);

ALTER TABLE EMPLOYEES ADD CONSTRAINT fk_manager_id 
FOREIGN KEY (manager_id) 
REFERENCES EMPLOYEES (employee_id);

ALTER TABLE EMPLOYEES ADD CONSTRAINT fk_job_id
FOREIGN KEY (job_id)
REFERENCES JOBS (job_id);

ALTER TABLE JOB_HISTORY ADD CONSTRAINT fk_job_id
FOREIGN KEY (job_id)
REFERENCES JOBS (job_id);

ALTER TABLE JOB_HISTORY ADD CONSTRAINT fk_department_id
FOREIGN KEY (department_id)
REFERENCES DEPARTMENTS (department_id);

ALTER TABLE JOB_HISTORY ADD CONSTRAINT pk_job_history PRIMARY KEY (employee_id, start_date);

ALTER TABLE JOB_HISTORY ADD CONSTRAINT fk_employee_id
FOREIGN KEY (employee_id)
REFERENCES EMPLOYEES (employee_id);

-- zmiana nazewnictwa constraintów (kolizja nazw)
ALTER TABLE EMPLOYEES DROP CONSTRAINT fk_manager_id;
ALTER TABLE EMPLOYEES DROP CONSTRAINT fk_job_id;

ALTER TABLE JOB_HISTORY DROP CONSTRAINT fk_employee_id;
ALTER TABLE JOB_HISTORY DROP CONSTRAINT fk_department_id;


-- zdefiniowanie relacji od początku
-- wzory/nazewnictwo
-- relacja (komentarz): {tabela z fk}__{kolumna_fk} -> {tabela z pk}__{kolumna_pk}
-- relacja constraint_name: fk_{tabela_z_fk}__{tabela_z_pk}_{kolumna_pk}

-- relacja employees__manager_id -> employees__employee_id
ALTER TABLE EMPLOYEES ADD CONSTRAINT fk_employees__employees_manager_id 
FOREIGN KEY (manager_id) 
REFERENCES EMPLOYEES (employee_id);

-- relacja employees__job_id -> jobs__job_id
ALTER TABLE EMPLOYEES ADD CONSTRAINT fk_employees__jobs_job_id
FOREIGN KEY (job_id)
REFERENCES JOBS (job_id);

-- relacja employees__department_id -> departmens__department_id
ALTER TABLE EMPLOYEES ADD CONSTRAINT fk_employees__departments_department_id
FOREIGN KEY (department_id)
REFERENCES DEPARTMENTS (department_id);

-- relacja job_history__job_id -> jobs__job_id
ALTER TABLE JOB_HISTORY ADD CONSTRAINT fk_job_history__jobs_job_id
FOREIGN KEY (job_id)
REFERENCES JOBS (job_id);

-- relacja job_history__department_id -> departments__department_id
ALTER TABLE JOB_HISTORY ADD CONSTRAINT fk_job_history__departments_department_id
FOREIGN KEY (department_id)
REFERENCES DEPARTMENTS (department_id);

-- relacja job_history__employee_id -> employees__employee_id
ALTER TABLE JOB_HISTORY ADD CONSTRAINT fk_job_history__employees_employee_id
FOREIGN KEY (employee_id)
REFERENCES EMPLOYEES (employee_id);

-- dodanie unique do employees_manager_id
ALTER TABLE EMPLOYEES ADD CONSTRAINT UC_manager UNIQUE (manager_id);

-- relacja departments__manager_id -> employees__manager_id
ALTER TABLE DEPARTMENTS ADD CONSTRAINT fk_departments__employees_manager_id
FOREIGN KEY (manager_id)
REFERENCES EMPLOYEES (manager_id);

-- relacja departments__location_id -> locations__location_id
ALTER TABLE DEPARTMENTS ADD CONSTRAINT fk_departments__locations_location_id
FOREIGN KEY (location_id)
REFERENCES LOCATIONS (location_id);

-- relacja location__country_id -> countries__country_id
ALTER TABLE LOCATIONS ADD CONSTRAINT fk_locations__countries_country_id
FOREIGN KEY (country_id)
REFERENCES COUNTRIES (country_id);

-- relacja countries__region_id -> regions__region_id
ALTER TABLE COUNTRIES ADD CONSTRAINT fk_countries__regions_region_id
FOREIGN KEY (region_id)
REFERENCES REGIONS (region_id);

-- warunek check w tabeli jobs

ALTER TABLE JOBS ADD CONSTRAINT CHECK_min_max_salary CHECK(max_salary - min_salary >= 2000);

-- wstawienie do tabeli JOBS 4 rekordów
INSERT INTO JOBS (job_title, min_salary, max_salary) VALUES ('praca1', 2000, 4000);
INSERT INTO JOBS (job_title, min_salary, max_salary) VALUES ('praca2', 4000, 6000);
INSERT INTO JOBS (job_title, min_salary, max_salary) VALUES ('praca3', 6000, 8000);
INSERT INTO JOBS (job_title, min_salary, max_salary) VALUES ('praca4', 8000, 12000);

INSERT INTO JOBS (job_title, min_salary, max_salary) VALUES ('pracs5', 8000, 12000);
INSERT INTO JOBS (job_title, min_salary, max_salary) VALUES ('pracb5', 8000, 12000);
INSERT INTO JOBS (job_title, min_salary, max_salary) VALUES ('pracsb5', 8000, 12000);

-- wstawienie do tabeli EMPLOYEES 4 rekordów
SELECT * FROM JOBS;

INSERT INTO EMPLOYEES (first_name, last_name, email, phone_number, hire_date, job_id, salary, commision_pct) VALUES ('imie1', 'nazwisko1', 'email1', '0123456789', TO_DATE('2020/03/02', 'yyyy/mm/dd'), 2, 3500, 8.5 );
INSERT INTO EMPLOYEES (first_name, last_name, email, phone_number, hire_date, job_id, salary, commision_pct) VALUES ('imie2', 'nazwisko2', 'email2', '1234567890', TO_DATE('2020/04/03', 'yyyy/mm/dd'), 3, 5500, 6.5 );
INSERT INTO EMPLOYEES (first_name, last_name, email, phone_number, hire_date, job_id, salary, commision_pct) VALUES ('imie3', 'nazwisko3', 'email3', '2345678901', TO_DATE('2020/05/04', 'yyyy/mm/dd'), 4, 7500, 4.5 );
INSERT INTO EMPLOYEES (first_name, last_name, email, phone_number, hire_date, job_id, salary, commision_pct) VALUES ('imie4', 'nazwisko4', 'email4', '3456789012', TO_DATE('2020/06/05', 'yyyy/mm/dd'), 5, 10500, 2.5 );

SELECT * FROM EMPLOYEES;

-- zmiana menagera dla pracowników o id 2 i 3 (1) - przesunięte Idki
UPDATE EMPLOYEES SET manager_id = 2 WHERE employee_id = 3;
UPDATE EMPLOYEES SET manager_id = 2 WHERE employee_id = 4;

-- ORA-00001: naruszono więzy unikatowe (INF2S_BULECKIT.UC_MANAGER)
-- usunięcie constraintu fk_departments__employees_manager_id
ALTER TABLE DEPARTMENTS DROP CONSTRAINT fk_departments__employees_manager_id;

-- usunięcie constraintu UC_MANAGER
ALTER TABLE EMPLOYEES DROP CONSTRAINT UC_MANAGER;

-- dodanie constraintu fk_departments__employees_manager_id - odwołanie do kolumny departments__manager_id poprzez employees__employee_id
ALTER TABLE DEPARTMENTS ADD CONSTRAINT fk_departments__employees_manager_id
FOREIGN KEY (manager_id)
REFERENCES EMPLOYEES (employee_id);

-- próba dodania managera o id 2 dla pracownika o id 4
UPDATE EMPLOYEES SET manager_id = 2 WHERE employee_id = 4;
SELECT * FROM EMPLOYEES;

--  Dla tabeli JOBS zwiększ minimalne i maksymalne wynagrodzenie o 500 jeśli nazwa zawiera 'b' lub 's'
UPDATE JOBS SET min_salary = min_salary + 500, max_salary = max_salary + 500 WHERE LOWER(job_title) LIKE '%b%' OR LOWER(job_title) LIKE '%s%';

SELECT * FROM JOBS;

-- Z tabeli JOBS usuń rekordy, dla których maksymalne zarobki są większe od 9000.

--DELETE FROM JOBS WHERE max_salary > 9000;
DELETE FROM EMPLOYEES
WHERE JOB_ID IN (SELECT JOB_ID FROM JOBS WHERE MAX_SALARY > 9000);

DELETE FROM JOBS WHERE max_salary > 9000;
SELECT * FROM JOBS;

-- Usuń jedną z tabel i sprawdź czy możesz ją odzyskać
DROP TABLE LOCATIONS;
-- tabela ma unikatowe/główne klucze, do których odwołują się obce klucze

