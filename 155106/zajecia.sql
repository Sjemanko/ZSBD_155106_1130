-- 1 Przygotuj bazę danych na podstawie schematu

CREATE TABLE EMPLOYEES(
    employee_id NUMBER(6) GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    first_name VARCHAR2(50),
    last_name VARCHAR2(50),
    email VARCHAR2(50),
    phone_number VARCHAR2(20),
    hire_date DATE,
    job_id NUMBER(6),
    salary FLOAT,
    commision_pct FLOAT,
    manager_id NUMBER(6),
    department_id NUMBER(6),
    PRIMARY KEY (employee_id)
);

CREATE TABLE DEPARTMENTS(
    department_id NUMBER(6) GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    department_name VARCHAR2(50),
    manager_id NUMBER(6),
    location_id NUMBER(6),
    PRIMARY KEY (department_id)
);

CREATE TABLE JOB_HISTORY (
    employee_id NUMBER(6) NOT NULL,
    start_date DATE,
    end_date DATE,
    job_id NUMBER(6),
    department_id NUMBER(6),
    PRIMARY KEY (employee_id, start_date)
);

CREATE TABLE JOBS (
    job_id NUMBER(6) GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    job_title VARCHAR2(50),
    min_salary FLOAT,
    max_salary FLOAT,
    PRIMARY KEY (job_id)
);

CREATE TABLE LOCATIONS (
    location_id NUMBER(6) GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    street_address VARCHAR2(50),
    postal_code VARCHAR2(20),
    city VARCHAR(50),
    state_province VARCHAR(50),
    country_id NUMBER(6),
    PRIMARY KEY (location_id)
);

CREATE TABLE COUNTRIES (
    country_id NUMBER(6) GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    country_name VARCHAR(50),
    region_id NUMBER(6),
    PRIMARY KEY (country_id)
);

CREATE TABLE REGIONS (
    region_id NUMBER(6) GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    region_name VARCHAR(50),
    PRIMARY KEY (region_id)
);


-- zdefiniowanie relacji od początku
-- wzory/nazewnictwo
-- relacja (komentarz): {tabela z fk}__{kolumna_fk} -> {tabela z pk}__{kolumna_pk}
-- relacja constraint_name: fk_{tabela_z_fk}__{tabela_z_pk}_{kolumna_pk}

-- relacja employees__manager_id -> employees__employee_id
ALTER TABLE EMPLOYEES 
ADD CONSTRAINT fk_employees__employees_manager_id
FOREIGN KEY (manager_id) 
REFERENCES EMPLOYEES (employee_id)
ON DELETE CASCADE;

-- relacja employees__job_id -> jobs__job_id
ALTER TABLE EMPLOYEES 
ADD CONSTRAINT fk_employees__jobs_job_id
FOREIGN KEY (job_id)
REFERENCES JOBS (job_id)
ON DELETE CASCADE;

-- relacja employees__department_id -> departmens__department_id
ALTER TABLE EMPLOYEES 
ADD CONSTRAINT fk_employees__departments_department_id
FOREIGN KEY (department_id)
REFERENCES DEPARTMENTS (department_id)
ON DELETE CASCADE;

-- relacja job_history__job_id -> jobs__job_id
ALTER TABLE JOB_HISTORY 
ADD CONSTRAINT fk_job_history__jobs_job_id
FOREIGN KEY (job_id)
REFERENCES JOBS (job_id)
ON DELETE CASCADE;

-- relacja job_history__department_id -> departments__department_id
ALTER TABLE JOB_HISTORY 
ADD CONSTRAINT fk_job_history__departments_department_id
FOREIGN KEY (department_id)
REFERENCES DEPARTMENTS (department_id);

-- relacja job_history__employee_id -> employees__employee_id
ALTER TABLE JOB_HISTORY 
ADD CONSTRAINT fk_job_history__employees_employee_id
FOREIGN KEY (employee_id)
REFERENCES EMPLOYEES (employee_id);

-- relacja departments__manager_id -> employees__manager_id
ALTER TABLE DEPARTMENTS
ADD CONSTRAINT fk_departments__employees_manager_id
FOREIGN KEY (manager_id)
REFERENCES EMPLOYEES (employee_id);

-- relacja departments__location_id -> locations__location_id
ALTER TABLE DEPARTMENTS 
ADD CONSTRAINT fk_departments__locations_location_id
FOREIGN KEY (location_id)
REFERENCES LOCATIONS (location_id);

-- relacja location__country_id -> countries__country_id
ALTER TABLE LOCATIONS 
ADD CONSTRAINT fk_locations__countries_country_id
FOREIGN KEY (country_id)
REFERENCES COUNTRIES (country_id);

-- relacja countries__region_id -> regions__region_id
ALTER TABLE COUNTRIES 
ADD CONSTRAINT fk_countries__regions_region_id
FOREIGN KEY (region_id)
REFERENCES REGIONS (region_id);

ALTER TABLE JOBS ADD CONSTRAINT CHECK_min_max_salary CHECK(max_salary - min_salary >= 2000);
ALTER TABLE JOBS ADD CONSTRAINT CHECK_min_max_salary CHECK(max_salary - min_salary >= 2000);

-- SEED (2, 3)
INSERT INTO JOBS (job_id, job_title, min_salary, max_salary) VALUES (1, 'pracba1', 2000, 4000);
INSERT INTO JOBS (job_id, job_title, min_salary, max_salary) VALUES (2, 'praca2', 4000, 6000);
INSERT INTO JOBS (job_id, job_title, min_salary, max_salary) VALUES (3, 'pracsa3', 6000, 8000);
INSERT INTO JOBS (job_id, job_title, min_salary, max_salary) VALUES (4, 'praca4', 8000, 12000);

INSERT INTO DEPARTMENTS (department_id, department_name) VALUES (1, 'departament1');
INSERT INTO DEPARTMENTS (department_id, department_name) VALUES (2, 'departament2');
INSERT INTO DEPARTMENTS (department_id, department_name) VALUES (3, 'departament3');
INSERT INTO DEPARTMENTS (department_id, department_name) VALUES (4, 'departament4');
INSERT INTO DEPARTMENTS (department_id, department_name) VALUES (20, 'departament20');
INSERT INTO DEPARTMENTS (department_id, department_name) VALUES (50, 'departament50');

INSERT INTO EMPLOYEES (employee_id, first_name, last_name, email, phone_number, hire_date, job_id, salary, commision_pct) 
VALUES (1, 'imie1', 'nazwisko1', 'email1', '0123456789', TO_DATE('2020/03/02', 'yyyy/mm/dd'), 1, 3500, 8.5 );
INSERT INTO EMPLOYEES (employee_id, first_name, last_name, email, phone_number, hire_date, job_id, salary, commision_pct) 
VALUES (2, 'imise2', 'nazwisko2', 'email2', '1234567890', TO_DATE('2020/04/03', 'yyyy/mm/dd'), 2, 5500, 6.5 );
INSERT INTO EMPLOYEES (employee_id, first_name, last_name, email, phone_number, hire_date, job_id, salary, commision_pct)
VALUES (3, 'imie3', 'nazwisko3', 'email3', '2345678901', TO_DATE('2020/05/04', 'yyyy/mm/dd'), 3, 7500, 4.5 );
INSERT INTO EMPLOYEES (employee_id, first_name, last_name, email, phone_number, hire_date, job_id, salary, commision_pct) 
VALUES (4, 'ibmie4', 'nazwisko4', 'email4', '3456789012', TO_DATE('2020/06/05', 'yyyy/mm/dd'), 4, 10500, 2.5 );

INSERT INTO JOB_HISTORY (employee_id, start_date, end_date, job_id, department_id) VALUES (1, TO_DATE('2020/06/05', 'yyyy/mm/dd'), TO_DATE('2021/06/05', 'yyyy/mm/dd'), 1, 1);
INSERT INTO JOB_HISTORY (employee_id, start_date, end_date, job_id, department_id) VALUES (2, TO_DATE('2021/06/05', 'yyyy/mm/dd'), TO_DATE('2022/06/05', 'yyyy/mm/dd'), 2, 2);
INSERT INTO JOB_HISTORY (employee_id, start_date, end_date, job_id, department_id) VALUES (3, TO_DATE('2019/06/05', 'yyyy/mm/dd'), TO_DATE('2020/06/05', 'yyyy/mm/dd'), 3, 3);
INSERT INTO JOB_HISTORY (employee_id, start_date, end_date, job_id, department_id) VALUES (4, TO_DATE('2018/06/05', 'yyyy/mm/dd'), TO_DATE('2019/06/05', 'yyyy/mm/dd'), 4, 4);


SELECT * FROM JOBS;
SELECT * FROM DEPARTMENTS;
SELECT * FROM EMPLOYEES;
SELECT * FROM JOB_HISTORY;

-- REMOVING DATA
DELETE FROM JOB_HISTORY WHERE employee_id = 1;
DELETE FROM JOB_HISTORY WHERE employee_id = 2;
DELETE FROM JOB_HISTORY WHERE employee_id = 3;
DELETE FROM JOB_HISTORY WHERE employee_id = 4;

DELETE FROM DEPARTMENTS WHERE department_id = 1;
DELETE FROM DEPARTMENTS WHERE department_id = 2;
DELETE FROM DEPARTMENTS WHERE department_id = 3;
DELETE FROM DEPARTMENTS WHERE department_id = 4;
DELETE FROM DEPARTMENTS WHERE department_id = 20;
DELETE FROM DEPARTMENTS WHERE department_id = 50;



DELETE FROM EMPLOYEES WHERE employee_id = 1;
DELETE FROM EMPLOYEES WHERE employee_id = 2;
DELETE FROM EMPLOYEES WHERE employee_id = 3;
DELETE FROM EMPLOYEES WHERE employee_id = 4;

DELETE FROM JOBS WHERE job_id = 1;
DELETE FROM JOBS WHERE job_id = 2;
DELETE FROM JOBS WHERE job_id = 3;
DELETE FROM JOBS WHERE job_id = 4;

UPDATE JOBS SET job_id = NULL WHERE job_title = 'praca1';

-- W tabeli EMPLOYEES zmień menadżera pracownikom o id 2 i 3 na 1

UPDATE EMPLOYEES SET manager_id = 1 WHERE employee_id = 2;
UPDATE EMPLOYEES SET manager_id = 1 WHERE employee_id = 3;

--  Dla tabeli JOBS zwiększ minimalne i maksymalne wynagrodzenie o 500 jeśli nazwa zawiera 'b' lub 's'
UPDATE JOBS SET min_salary = min_salary + 500, max_salary = max_salary + 500 WHERE LOWER(job_title) LIKE '%b%' OR LOWER(job_title) LIKE '%s%';

-- Z tabeli JOBS usuń rekordy, dla których maksymalne zarobki są większe od 9000.

DELETE FROM JOBS WHERE max_salary > 9000;
SELECT * FROM JOB_HISTORY;
SELECT * FROM JOBS;

-- Usuń jedną z tabel i sprawdź czy możesz ją odzyskać

--SAVEPOINT deletetable;
--DROP TABLE REGIONS;
--ROLLBACK TO deletetable;

ALTER TABLE COUNTRIES DROP CONSTRAINT FK_COUNTRIES__REGIONS_REGION_ID;

SELECT object_name, original_name FROM user_recyclebin;
FLASHBACK TABLE REGIONS TO BEFORE DROP;











